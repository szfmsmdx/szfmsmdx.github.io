<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo 主题更换</title>
    <url>/2024/04/07/hexo-%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/</url>
    <content><![CDATA[<p>今天折腾一下 hexo 的主题变换 hh  </p>
<span id="more"></span>

<p>翻了一下<a href="https://hexo.io/themes/">hexo主题</a>，看到几个我自己觉得比较简洁还不错的  </p>
<ul>
<li><a href="https://github.com/hooozen/hexo-theme-tranquility">Tranquility</a></li>
<li><a href="https://github.com/Lhcfl/hexo-theme-anatolo">Anatolo</a></li>
<li><a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></li>
<li>… 之后再看看吧 hhh</li>
</ul>
<hr>
<blockquote>
<p>安装的过程参考了这篇<a href="https://zhuanlan.zhihu.com/p/618864711">文章</a></p>
</blockquote>
<h1 id="安装-next"><a href="#安装-next" class="headerlink" title="安装 next"></a>安装 next</h1><p>在根目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>下载完成后进入 <code>_config.yml</code> 文件修改 <code>theme</code>，输入 next 即可<br>然后 hexo 三连就能看到主页主题已经发生变化了  </p>
<p>版本查看在 <code>/themes/next/package.json</code>文件的version词条里  </p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="博客信息"><a href="#博客信息" class="headerlink" title="博客信息"></a>博客信息</h3><p>此为在根目录下的总的博客信息，包括 <code>title</code>、<code>subtitle</code> 等等内容  </p>
<h3 id="配置-next-主页"><a href="#配置-next-主页" class="headerlink" title="配置 next 主页"></a>配置 next 主页</h3><p>进 <code>next</code> 的 <code>_config.yml</code> 文件进行修改注释是不行的，因为他找不到相应的路径<br>所以要先在根目录下建立相应的文件夹然后再去修改 <code>next</code> 的配置文件  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page [tags名称] # 比如和注释里相同的 about、tags之类</span><br></pre></td></tr></table></figure>

<p>同理创建其他菜单，然后在 <code>next</code> 的配置文件中进行修改即可…<br>可以在source里面找到菜单，其实里面就是一些 md 文件，也可以自己进行修改添加内容等  </p>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>添加搜索功能与预计阅读时间<br>需要安装 <code>symbols-count-time</code> 插件  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<h3 id="账户头像"><a href="#账户头像" class="headerlink" title="账户头像"></a>账户头像</h3><p>首先要将图片放在 <code>/next/source/images</code> 下<br>然后修改 <code>next</code> 的配置文件，更改avatar的图片路径为刚刚的路径即可  </p>
<ul>
<li>rounded 是图片是否被圆形切割</li>
<li>rotated 是头像是否随鼠标旋转</li>
</ul>
<h3 id="修改文章间的分割线"><a href="#修改文章间的分割线" class="headerlink" title="修改文章间的分割线"></a>修改文章间的分割线</h3><p>找到文件 <code>themes/next/source/css/_common/components/post/post-footer.styl</code><br>进入修改如下内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: $grey-light;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: $post-eof-margin-top auto $post-eof-margin-bottom;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-block</span><span class="selector-pseudo">:last-of-type</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以自行根据喜好决定参数大小  </p>
<h3 id="NextT的目录和标签"><a href="#NextT的目录和标签" class="headerlink" title="NextT的目录和标签"></a>NextT的目录和标签</h3><p>按照之前的步骤，<code>hexo new page</code> 完之后，要在 <code>tags</code> 和 <code>categories</code> 的 <code>index.md</code> 里修改一下 <code>type</code><br>就是在<code>date</code>下加上<code>type: &quot;tags&quot;</code>  </p>
<p>以 <code>tags</code> 为例  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date : xxxx</span><br><span class="line">type : &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后回到<code>_post</code>要推送的笔记下面，在相应文章的标签上加上<code>tags</code>即可<br>如下所示: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxxx</span><br><span class="line">date: xxxx</span><br><span class="line">categories: hexo</span><br><span class="line">tags: # 标签（多标签）</span><br><span class="line">- hexo</span><br><span class="line">- NextT</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后 <code>hexo</code> 三连即可</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中的markdown语法技巧</title>
    <url>/2024/04/10/hexo%E4%B8%AD%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>参考这篇<a href="https://www.imczw.com/post/tech/hexo-next-tags-markdown.html">博客</a>，效果确实是很震惊</p>
<span id="more"></span>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo本地博客+云服务器个人博客搭建</title>
    <url>/2024/04/06/hexo%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2+%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>记录一下本地搭建 <code>hexo</code> 个人博客并部署到云服务器的过程。。。<br>本地环境是 <code>win11</code> ，云服务器是 <code>Ubuntu 22.04LTS</code>  </p>
<p>大概的流程是本地写笔记，推送到云服务器然后部署，展示给大家<br>所以当然也可以用 <code>GitHub.io</code> 去进行部署，这是取决于各位的。。。</p>
<span id="more"></span>

<h2 id="Node-js-git"><a href="#Node-js-git" class="headerlink" title="Node.js &amp;&amp; git"></a>Node.js &amp;&amp; git</h2><p><code>Node.js</code> 和 <code>git</code> 是 <code>hexo</code> 安装前的必备插件，所以要提前安装一下这两个，基本上，进官网直接下载一直 next 安装即可。。。</p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><a href="https://git-scm.com/download/win">git下载地址</a><br>可以通过 cmd 命令 <code>git -v</code> 查看 <code>git</code> 版本判断是否成功安装<br>按需下载即可</p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="https://nodejs.cn/download/">Nodejs下载地址</a><br>同样按需下载，没有特殊要求无脑继续就可以了。。<br>可以在 cmd 窗口中通过 <code>node -v</code> 和 <code>npm -v</code> 命令查看版本（查看是否成功安装了 node）<br>注意 <code>node</code> 自带 <code>npm</code> ,但是版本和下载路径可能不满足大家的需求  </p>
<h4 id="npm更换淘宝镜像源"><a href="#npm更换淘宝镜像源" class="headerlink" title="npm更换淘宝镜像源"></a>npm更换淘宝镜像源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最新地址 淘宝 NPM 镜像站喊你切换新域名啦!</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前源</span></span><br><span class="line">npm config get registry </span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复官方源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>

<h4 id="npm更新"><a href="#npm更新" class="headerlink" title="npm更新"></a>npm更新</h4><p><a href="https://juejin.cn/post/7065534944101007391">搜索词条的第一个</a><br>这里通过 <code>n</code> 包对 <code>Nodejs</code> 进行管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">n lts <span class="comment"># 长期支持版本</span></span><br><span class="line">n latest <span class="comment"># 最新版本</span></span><br></pre></td></tr></table></figure>

<p>其他命令就不展示了，善用搜索引擎 hh  </p>
<h2 id="配置-hexo"><a href="#配置-hexo" class="headerlink" title="配置 hexo"></a>配置 hexo</h2><p>在命令行中输入  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>找到你要写博客的父目录，比如你想将文件夹放在桌面就取到桌面的路径下  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt; // folder为你的博客目录名字</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt; // 进入该目录</span><br><span class="line">npm install // 安装依赖</span><br></pre></td></tr></table></figure>

<p>到此，本地博客就已经搭建完成了  </p>
<h2 id="将本地博客部署到云服务器中"><a href="#将本地博客部署到云服务器中" class="headerlink" title="将本地博客部署到云服务器中"></a>将本地博客部署到云服务器中</h2><p>既然是部署到云服务器，当然需要 <code>ssh</code> 连接，我用的 cmd 下的ssh连接<br>貌似 win 下已经自带了 openssh 吧，我不太清楚hh，还请有心人自行检索搜索引擎 ^ ^  </p>
<h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p>这里我用的阿里云的服务器，他们给的镜像里已经装有了 <code>git</code> 所以就没有安装了。。<br>既然需要同步，那么自然不能每次都要登录 <code>git</code> ，所以要配置一下免密登录  </p>
<h4 id="1-创建用户并设置密码"><a href="#1-创建用户并设置密码" class="headerlink" title="1. 创建用户并设置密码"></a>1. 创建用户并设置密码</h4><p>下面的 <code>username</code> 设置为你喜欢的用户名，并设置一个属于这个账户的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser [username]</span><br><span class="line">passwd [username]</span><br></pre></td></tr></table></figure>
<p>可能不是这个顺序，但是注意看命令行给的提示，看心情补充额外信息吧，只要有用户名密码即可 hh</p>
<h4 id="2-分配用户权限"><a href="#2-分配用户权限" class="headerlink" title="2. 分配用户权限"></a>2. 分配用户权限</h4><p>如果没有 wheel 组就先建立 wheel 组（没有的话直接添加会报错的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 wheel 组</span></span><br><span class="line">addgroup wheel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加刚刚建立的用户到用户组</span></span><br><span class="line">usermod [username] -G wheel</span><br></pre></td></tr></table></figure>

<h4 id="3-本地创建密钥"><a href="#3-本地创建密钥" class="headerlink" title="3. 本地创建密钥"></a>3. 本地创建密钥</h4><p>！！！ 注意是在本地 <code>win11</code> 创建密钥，相当于身份证了，就可以实现免密登录了<br>在本机终端中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>然后无脑回车，得到一个新的密钥<br>一般来说在你创建的时候命令行会提示你密钥文件的路径，windows电脑一般是C:\Users\Administrator.ssh（不确定可以百度一下 hh）</p>
<p>复制id_rsa.pub文件中的内容备用。</p>
<h4 id="4-配置公钥"><a href="#4-配置公钥" class="headerlink" title="4. 配置公钥"></a>4. 配置公钥</h4><p>回到服务器端，用 <code>su</code> 命令切到你创建的那个用户中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - [username]</span><br></pre></td></tr></table></figure>

<p>创建 <code>.ssh</code> 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure>

<p>利用 <code>vi</code> 或 <code>vim</code> 新建 <code>authorized_keys</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">vi .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>将刚刚 <code>id_rsa.pub</code> 公钥中的内容，复制粘贴到文件里，保存退出。</p>
<h3 id="git-仓库配置"><a href="#git-仓库配置" class="headerlink" title="git 仓库配置"></a>git 仓库配置</h3><p>退出用户登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照提示输入你的密码...</span></span><br></pre></td></tr></table></figure>

<p>这时应该可以看到是 <code>root</code> 用户，创建 <code>git</code> 目录，并修改目录的所有权和用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/git/</span><br><span class="line"><span class="built_in">chown</span> -R [username]:[username] /home/git/   <span class="comment"># 是你刚刚创建的用户名</span></span><br><span class="line"><span class="built_in">chmod</span> -R 755 /home/git/</span><br></pre></td></tr></table></figure>

<p>进入目录，建立git仓库，修改权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/</span><br><span class="line">git init --bare blog.git</span><br><span class="line">chown [username]:[username] -R blog.git</span><br></pre></td></tr></table></figure>

<p>新建钩子文件，但是要看你具体的 git 版本<br>我的是 <code>post-update.xxx</code>（文件类型忘了，配置时忘了记录）<br>需要进入修改添加两行内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /home/git/blog.git/hooks/post (然后这里直接按 tab 补全补出来)</span><br></pre></td></tr></table></figure>

<p>进入文件后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/home/blog --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>不着急退出，看一下上面的注释，我的文件里写着要修改文件名为 <code>post-update</code> 才能生效，具体问题具体分析吧，用 rm 命令重命名好了，然后<code>wq</code>保存退出  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm ./post- (tab 补全) # ./post-update</span><br></pre></td></tr></table></figure>

<p>然后修改文件权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /home/git/blog.git/hooks/post-update</span><br></pre></td></tr></table></figure>

<h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>安装 <code>nginx</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-install nginx </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样可以查看版本判断是否安装成功</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机启动</span></span><br><span class="line">systemctl enable nginx.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 nginx 状态</span></span><br><span class="line">systemctl status nginx.service</span><br></pre></td></tr></table></figure>

<p>修改nginx的默认配置，其中cd后边就是刚刚查到的安装位置，每个人可能都不一样 <code>/usr/local/nginx/conf/nginx.conf</code><br>这里可能有点麻烦的是我自己还修改了 <code>default</code> 文件<br>众说纷纭，我将我自己尝试过程中遇到的两种方案都贴给大家<br><a href="https://zhuanlan.zhihu.com/p/158678677">配置 conf 文件</a><br><a href="https://blog.captainz.cc/posts/hexo_nginx.html#%E9%85%8D%E7%BD%AE-Nginx-%E6%89%98%E7%AE%A1%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95">配置 default 文件</a></p>
<p>配置完重启下 <code>nginx</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>

<h3 id="更改本地-hexo-配置文件"><a href="#更改本地-hexo-配置文件" class="headerlink" title="更改本地 hexo 配置文件"></a>更改本地 hexo 配置文件</h3><p>打开你<strong>本地</strong>的hexo博客所在文件里面的配置文件_config.yml<br>应该在最后的位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: [username]@100.0.0.100:/home/git/blog.git   #用户名@服务器Ip:git仓库位置</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>在本地hexo博客根目录下，打开终端，部署  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后访问服务器的 IP 地址应该就可以看到 hexo 已经部署完成了。。。<br>后续就是善用搜索引擎的过程了。。。  </p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown生成目录</title>
    <url>/2024/04/09/markdown%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<!-- TOC -->
<!-- vscode-markdown-toc -->
<ul>
<li><a href="#test">test</a></li>
<li><a href="#VSCMarkdownTOC">利用VSC的插件<code>Markdown TOC</code>生成目录</a></li>
<li><a href="#test-1">test</a><ul>
<li><a href="#test1">test1</a><!-- vscode-markdown-toc-config
  numbering=false
  autoSave=true
  /vscode-markdown-toc-config -->
<!-- /TOC --></li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="在hexo中开启侧边栏文章目录"><a href="#在hexo中开启侧边栏文章目录" class="headerlink" title="在hexo中开启侧边栏文章目录"></a>在hexo中开启侧边栏文章目录</h1><p>看了网上的一些帖子，好像因为 <code>next</code> 版本不匹配导致<br>其实好像不用大费周章寻找 <code>_custom.styl</code>（至少我是这样。。。）<br>只需要在<code>_config.md</code> 下修改 toc 词条即可<br>这是我的配置  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Table of Contents in the Sidebar</span><br><span class="line"># Front-matter variable (nonsupport wrap expand_all).</span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: true</span><br><span class="line">  # If true, all words will placed on next lines if header width longer then sidebar width.</span><br><span class="line">  wrap: true</span><br><span class="line">  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span><br><span class="line">  expand_all: true</span><br><span class="line">  # Maximum heading depth of generated toc.</span><br><span class="line">  max_depth: 3</span><br></pre></td></tr></table></figure>
<p>按照英文指示自行按照喜好修改参数即可hh  </p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a><a name='test'></a>test</h2><blockquote>
<p>test for generate TOC</p>
</blockquote>
<h1 id="markdown中插入目录"><a href="#markdown中插入目录" class="headerlink" title="markdown中插入目录"></a>markdown中插入目录</h1><h2 id="利用VSC的插件Markdown-TOC生成目录"><a href="#利用VSC的插件Markdown-TOC生成目录" class="headerlink" title="利用VSC的插件Markdown TOC生成目录"></a><a name='VSCMarkdownTOC'></a>利用VSC的插件<code>Markdown TOC</code>生成目录</h2><p>直接在VSC的插件里搜索 <code>Markdown TOC</code>，第一个下载最高的插件下载<br>根据插件给出的使用方法  </p>
<blockquote>
<ol>
<li><code>ctrl + shift + p</code> 呼出面板</li>
<li>将光标移动到你要生成目录的地方</li>
<li>输入 <code>Generate</code> 找到命令 <code>Generate TOC for markdown</code> </li>
<li>选择该命令就可以了。。。</li>
<li>可以在他注释的地方修改参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numbering=false # 为true则开启标签目录带序号</span><br><span class="line">autoSave=true   # 为true生成目录时自动保存文件</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<p>不过好像这个插件会自动将你md文件中的标签改成 html 的格式<br>但是初次生成的时候，好像默认两个参数都是true，我也没找到在哪里修改他的配置文件，所以就怪怪的要生成两次，先生成一次然后修改参数，删掉原来的目录（保存注释），再生成一次他就会按照参数生成一份  </p>
<br>

<p>而且感觉这东西好像不太实用呢，我需要将他生成的目录先放到hexo生成的两个<code>---</code>后面，然后这个插件为啥不支持生成一级文件。。。<br>此文仅做个记录以后不用了。。。    </p>
<h2 id="test-1"><a href="#test-1" class="headerlink" title="test"></a><a name='test-1'></a>test</h2><blockquote>
<p>test for generate TOC</p>
</blockquote>
<h3 id="test1"><a href="#test1" class="headerlink" title="test1"></a><a name='test1'></a>test1</h3><blockquote>
<p>test for generate TOC</p>
</blockquote>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>nextT美化</title>
    <url>/2024/04/09/nextT%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>额额。。。此贴的所有操作都是基于 <code>next8</code> 版本进行的。。。<br>版本对应不上可能导致相关文件找不到，还请各位善用搜索引擎  </p>
<span id="more"></span>

<h1 id="可切换模式按钮"><a href="#可切换模式按钮" class="headerlink" title="可切换模式按钮"></a>可切换模式按钮</h1><p><del>参考了这个佬的<a href="https://haomingzhang.com/hexo_3/">博客</a></del><br><del>在路径<code>themes/next/_vendors.yml</code> 下添加 <code>darkmode.js</code> 的cdn</del><br><del>然后我在next目录下没有找到 <code>_config.next.yml</code> 但是我添加在 <code>_config.yml</code> 里</del>  </p>
<br> 

<p>失败了。。。<br>可能是版本不对，更新给文件删了吧。。。 </p>
<hr>
<p>我又找到了另一个佬的<a href="https://www.techgrow.cn/posts/abf4aee1.html">博客</a><br>废话我不多说了，有用！<br>然后如果要自定义可以在这个路径下进行修改<br><code>\[root]\node_modules\hexo-next-darkmode\lib</code><br>root 就是你的博客根目录，其他 npm install 的包也在这里，可以找一找 hh  </p>
<h1 id="文章底部添加"><a href="#文章底部添加" class="headerlink" title="文章底部添加"></a>文章底部添加</h1><p>额原理就是加一个html的div标签<br>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV，在END POST BODY之后的部分）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是我是没有 <code>post.swig</code> 文件的，我操作了 <code>post.njk</code> 文件，同样可以</p>
<p>然后打开主题配置文件(_config.yml),在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>

<h1 id="把底部-标签换成图标"><a href="#把底部-标签换成图标" class="headerlink" title="把底部 # 标签换成图标"></a>把底部 # 标签换成图标</h1><p>修改模板<code>/themes/next/layout/_macro/post.njk</code> 在尾部找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; if theme.tag_icon else &#x27;#&#x27; %&#125;</span><br><span class="line"></span><br><span class="line"># 删去 if theme.tag_icon else &#x27;#&#x27; 即可</span><br><span class="line">&#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27;%&#125;</span><br><span class="line">重新渲染后可正确使用</span><br></pre></td></tr></table></figure>

<h1 id="首页折叠"><a href="#首页折叠" class="headerlink" title="首页折叠"></a>首页折叠</h1><p>起因是我觉得每次进主页都直接看全文很麻烦。。。<br>然后去搜了下压缩结果是静态资源的压缩，在这篇<a href="https://akilar.top/posts/49b73b87/">博客</a>里<br>但我其实搜错关键字了hh<br>参考这篇<a href="https://blog.csdn.net/yueyue200830/article/details/104470646">博客</a><br>没想到主页文章折叠在 <code>next</code> 的 <code>_config.yml</code> 文件里就有<br>不过貌似优先级比较低？在我的<code>markdown</code>生成目录的文章里，如果填在 <code>&lt;!--TOC--&gt;</code> 标签之前就无法折叠了。。。  </p>
<h1 id="next文章评论区"><a href="#next文章评论区" class="headerlink" title="next文章评论区"></a>next文章评论区</h1><p>看了下 <code>next</code> 的 <code>_config.yml</code> 文件  </p>
<h1 id="文章置顶功能"><a href="#文章置顶功能" class="headerlink" title="文章置顶功能"></a>文章置顶功能</h1>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
</search>
